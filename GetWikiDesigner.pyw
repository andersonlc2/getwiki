# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GetWikiDesigner.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import re
import time
import bs4
import requests
from PyQt5 import QtCore, QtGui, QtWidgets
from GetWiki import GetWiki
from messageBox import *


class Ui_GetWikiWindow(object):

    def setupUi(self, GetWikiWindow):
        GetWikiWindow.setObjectName("GetWikiWindow")
        GetWikiWindow.resize(418, 385)
        GetWikiWindow.setMouseTracking(False)
        GetWikiWindow.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        GetWikiWindow.setAcceptDrops(False)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/Icon_Window/icon_wiki.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        GetWikiWindow.setWindowIcon(icon)
        GetWikiWindow.setWindowOpacity(1.0)
        GetWikiWindow.setAccessibleName("")
        GetWikiWindow.setDockNestingEnabled(True)

        self.centralwidget = QtWidgets.QWidget(GetWikiWindow)
        self.centralwidget.setAutoFillBackground(False)
        self.centralwidget.setObjectName("centralwidget")

        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")

        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setMinimumSize(QtCore.QSize(0, 80))
        self.frame.setMaximumSize(QtCore.QSize(16777215, 80))
        self.frame.setStyleSheet("background-color: rgb(35, 186, 255);")
        self.frame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")

        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")

        self.frame_4 = QtWidgets.QFrame(self.frame)
        self.frame_4.setMinimumSize(QtCore.QSize(400, 0))
        self.frame_4.setMaximumSize(QtCore.QSize(400, 16777215))
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")

        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_4)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")

        self.lblTitulo = QtWidgets.QLabel(self.frame_4)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        self.lblTitulo.setFont(font)
        self.lblTitulo.setObjectName("lblTitulo")

        self.horizontalLayout_3.addWidget(self.lblTitulo)
        self.horizontalLayout_2.addWidget(self.frame_4)
        self.verticalLayout.addWidget(self.frame)

        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.frame_2.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")

        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.frame_3 = QtWidgets.QFrame(self.frame_2)
        self.frame_3.setMinimumSize(QtCore.QSize(400, 0))
        self.frame_3.setMaximumSize(QtCore.QSize(400, 16777215))
        self.frame_3.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")

        self.btnSave = QtWidgets.QPushButton(self.frame_3)
        self.btnSave.setGeometry(QtCore.QRect(270, 140, 61, 28))
        self.btnSave.setStyleSheet("QPushButton {\n"
                                   "    border-radius: 5px;\n"
                                   "    border: 1px solid rgb(230, 230, 230)\n"
                                   "}\n"
                                   "QPushButton:hover {\n"
                                   "    background-color: rgb(235, 255, 255);\n"
                                   "    color: rgb(60, 203, 255);\n"
                                   "}\n"
                                   "QPushButton:pressed {\n"
                                   "    background-color: rgb(0,0,0)\n"
                                   "}\n"
                                   "\n"
                                   "")
        self.btnSave.setObjectName("btnSave")

        self.txtDir = QtWidgets.QLineEdit(self.frame_3)
        self.txtDir.setEnabled(True)
        self.txtDir.setGeometry(QtCore.QRect(10, 240, 321, 31))
        self.txtDir.setFocusPolicy(QtCore.Qt.ClickFocus)  # Para tirar a seleção da Txt
        self.txtDir.setReadOnly(True)
        self.txtDir.setObjectName("txtDir")

        self.lblSearch = QtWidgets.QLabel(self.frame_3)
        self.lblSearch.setGeometry(QtCore.QRect(60, 70, 61, 16))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(12)
        self.lblSearch.setFont(font)
        self.lblSearch.setObjectName("lblSearch")

        self.txtSearch = QtWidgets.QLineEdit(self.frame_3)
        self.txtSearch.setGeometry(QtCore.QRect(60, 100, 271, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.txtSearch.setFont(font)
        self.txtSearch.setStyleSheet("color: rgb(78, 187, 255);")
        self.txtSearch.setClearButtonEnabled(True)
        self.txtSearch.setObjectName("txtSearch")
        self.txtSearch.setFocusPolicy(QtCore.Qt.ClickFocus)  # Para tirar a seleção da Txt


        self.pushButton = QtWidgets.QPushButton(self.frame_3)
        self.pushButton.setGeometry(QtCore.QRect(60, 140, 161, 31))
        self.pushButton.setStyleSheet("QPushButton {\n"
                                      "    border-radius: 5px;\n"
                                      "    border: 1px solid rgb(230, 230, 230)\n"
                                      "}\n"
                                      "QPushButton:hover {\n"
                                      "    background-color: rgb(235, 255, 255);\n"
                                      "    color: rgb(60, 203, 255);\n"
                                      "}\n"
                                      "QPushButton:pressed {\n"
                                      "    background-color: rgb(0,0,0)\n"
                                      "}\n"
                                      "")
        self.pushButton.setObjectName("pushButton")

        self.btnOpen = QtWidgets.QPushButton(self.frame_3)
        self.btnOpen.setGeometry(QtCore.QRect(330, 240, 61, 30))
        self.btnOpen.setStyleSheet("QPushButton {\n"
                                   "    border-radius: 5px;\n"
                                   "    border: 1px solid rgb(230, 230, 230)\n"
                                   "}\n"
                                   "QPushButton:hover {\n"
                                   "    background-color: rgb(235, 255, 255);\n"
                                   "    color: rgb(60, 203, 255);\n"
                                   "}\n"
                                   "QPushButton:pressed {\n"
                                   "    background-color: rgb(0,0,0)\n"
                                   "}\n"
                                   "")
        self.btnOpen.setObjectName("btnOpen")
        self.horizontalLayout.addWidget(self.frame_3)
        self.verticalLayout.addWidget(self.frame_2)
        GetWikiWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(GetWikiWindow)
        QtCore.QMetaObject.connectSlotsByName(GetWikiWindow)

        # INICIO DA MINHA EDIÇÃO

        self.btnSave.setEnabled(False)
        self.btnOpen.setEnabled(False)

        # Ao clicar no botão a função search é chamada
        self.pushButton.clicked.connect(lambda: self.atualiza())
        # Ao clicar no botão a função setText é chamada
        self.btnSave.clicked.connect(lambda: self.savefile())
        # Ao clicar no botão a função openfile é chamada
        self.btnOpen.clicked.connect(lambda: self.openfile())
        # Verifica mudança no texto da caixa de pesquisa
        self.txtSearch.textChanged.connect(lambda: self.enablesearch())

        self.objetoGet = GetWiki(self.txtSearch.text())


    def atualiza(self):
        if (self.txtSearch.text().isspace() or self.txtSearch.text() == ''):
            Tela(
                Ui_GetWikiWindow(),
                "Digite o nome para ser pesquisado, ex:",
                "Charles Darwin\nBrasil\nAnimalia",
                QMessageBox.Warning,
                self.resultadosave,
            ).caixas()
        else:
            self.objetoGet = GetWiki(self.txtSearch.text())  ##@@@@@@@@@@@@@@@@@@@
            self.request()

    def enablesearch(self):
        self.pushButton.setEnabled(True)
        self.btnOpen.setEnabled(False)
        self.btnSave.setEnabled(False)
        self.txtDir.clear()

    def openfile(self):
        try:
            os.system('start winword '+self.txtDir.text())
        except:
            os.system(self.txtDir.text()+'> con')

    '''
        def search(self):
        s = GetWiki.search(self.txtSearch.text())
        self.pushButton.setEnabled(False)
        self.btnSave.setEnabled(True)
        return s
    '''


    def setText(self):
        listTags = self.parseHtml(self.objetoGet.listHtml)
        retRegex = re.compile(r"(([\[])(.)*?([\]]))")
        titulo = self.objetoGet.search + '\n\n'
        listTags.insert(0, titulo)
        for tag in listTags:
            if tag == titulo:
                self.writeArch(titulo)
            else:
                if tag.text == 'Ver também' or tag.text == 'Referências' or tag.text == 'Notas' \
                        or tag.text == 'Filmografia':
                    break
                else:
                    self.writeArch(retRegex.sub("", tag.text).replace('Índice', ''))
        self.btnSave.setEnabled(False)
        self.btnOpen.setEnabled(True)

    def resultadosave(self, clicado):
        if clicado.text() == 'Save':
            r = requests.get(self.objetoGet.url)
            self.objetoGet.listHtml = r
            self.savefile()
        if clicado.text() == '&Yes':
            self.openfile()

    def request(self):
        self.pushButton.setEnabled(False)
        r = requests.get(self.objetoGet.url)
        if self.validResp(r):
            Tela(
                Ui_GetWikiWindow(),
                "Sua pesquisa foi concuída com sucesso.",
                "Deseja salvar agora?",
                QMessageBox.Critical,
                self.resultadosave,
                QMessageBox.No | QMessageBox.Save,
            ).caixas()
            self.btnSave.setEnabled(True)
            self.objetoGet.listHtml = r
        else:
            Tela(
                Ui_GetWikiWindow(),
                "Sua pesquisa não foi relizada.",
                "Essa página ainda não foi crida na Wikipédia.",
                QMessageBox.Critical,
                self.resultadosave
            ).caixas()

    def validResp(self, r):
        keysList = list(r.headers.keys())
        if 'Transfer-Encoding' in keysList:
            print('Falha, tentando novamente...')
            time.sleep(5)
            #self.request()
        else:
            pos = keysList.index('Content-Length')
            valueList = list(r.headers.values())
            if int(valueList[pos]) > 10000:
                return True
            else:
                return False

    def parseHtml(self, resp):
        html_page = resp.text
        text = bs4.BeautifulSoup(html_page, 'html.parser')

        # exclui todas as tags 'small'
        soup = text.find_all('small')
        for s in soup:
            s.extract()

        second = text.select("""
                    .mw-parser-output > p,
                    .mw-parser-output > h2,
                    .mw-parser-output > h3,
                    .mw-parser-output > blockquote,
                    .mw-parser-output > ul > li
                """)

        return second

    def writeArch(self, li):
        # arch = open(self.directory+self.nameArc, 'w',  encoding="utf-8")
        # arch.write(li+'\n')
        # arch.close()
        with open(self.txtDir.text(), 'a', encoding="utf-8") as f:
            f.write(li + '\n')
        f.close()

    def savefile(self):
        # default_dir = "C:\\Users\\cliente\\PythonScripts\\getWiki"
        # default_filename = os.path.join(default_dir, 'file_name')
        # fileName = QtWidgets.QFileDialog.getSaveFileName(None, "Salvar arquivo", default_filename,
        #                                                 "Arquivos de texto(*.txt)")
        # self.txtDir.setText((fileName[0]))
        try:
            filename = QtWidgets.QFileDialog.getSaveFileName(None, "Salvar arquivo", self.objetoGet.nameArc,
                                                         "Arquivos de texto(*.txt)")
            self.txtDir.setText((filename[0]))
            self.setText()
            Tela(
                Ui_GetWikiWindow(),
                "Pesquisa salva com sucesso.",
                "Deseja abrir o arquivo?",
                QMessageBox.Information,
                self.resultadosave,
                QMessageBox.Yes | QMessageBox.No
            ).caixas()
        except (FileNotFoundError):
            Tela(
                Ui_GetWikiWindow(),
                "Ocorreu um erro ao salvar seu arquivo.",
                "Tente novamente.",
                QMessageBox.Warning,
                self.resultadosave,
            ).caixas()

        # FIM DA MINHA EDIÇÃO

    def retranslateUi(self, GetWikiWindow):
        _translate = QtCore.QCoreApplication.translate
        GetWikiWindow.setWindowTitle(_translate("GetWikiWindow", "GetWiki"))
        self.lblTitulo.setText(_translate("GetWikiWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:26pt; font-weight:600; color:#ffffff;\">GET WIKI </span><span style=\" font-size:11pt; font-weight:600; color:#ffffff;\">SEARCH</span></p></body></html>"))
        self.btnSave.setText(_translate("GetWikiWindow", "Save"))
        self.lblSearch.setText(_translate("GetWikiWindow", "Search:"))
        self.txtSearch.setPlaceholderText(_translate("GetWikiWindow", "your search..."))
        self.pushButton.setText(_translate("GetWikiWindow", "Go wiki"))
        self.btnOpen.setText(_translate("GetWikiWindow", "Open"))
import GetWikiRc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    GetWikiWindow = QtWidgets.QMainWindow()
    ui = Ui_GetWikiWindow()
    ui.setupUi(GetWikiWindow)
    GetWikiWindow.show()
    sys.exit(app.exec_())
